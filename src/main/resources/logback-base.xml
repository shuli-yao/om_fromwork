<?xml version="1.0" encoding="UTF-8"?>
<included>
    <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator" />

    <if condition='isDefined("spring.config.location")'>
        <then>
            <property file="${spring.config.location}" />
        </then>
    </if>
    <if condition='!isDefined("spring.config.location")'>
        <then>
            <property resource="application.properties" />
        </then>
    </if>

    <property name="logging.appender.console.enabled" value="${logging.appender.console.enabled:-false}" />
    <property name="logging.file.max.size" value="${logging.file.max.size:-50MB}" />
    <property name="logging.file.max.history.in.days" value="${logging.file.max.history.in.days:-30}" />
    <property name="logging.file.path.suffix" value="${logging.file.path.suffix:- }" />
    <property name="logging.async.queue.size" value="${logging.async.queue.size:-100000}" />
    <property name="logging.encoder.pattern" value="${logging.encoder.pattern:-%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${PID:- } [%t] --- %-40.40logger{40} [%4.4L] : [%X{x-bce-request-id}][%X{currentUser}] %m%n}" />

    <if condition='"true".equals(property("logging.appender.console.enabled"))'>
        <then>
            <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                    <level>DEBUG</level>
                </filter>
                <encoder>
                    <charset>UTF-8</charset>
                    <pattern>${logging.encoder.pattern}</pattern>
                </encoder>
            </appender>

            <appender name ="ASYNC_CONSOLE" class= "ch.qos.logback.classic.AsyncAppender">
                <discardingThreshold >0</discardingThreshold>
                <queueSize>${logging.async.queue.size}</queueSize>
                <includeCallerData>true</includeCallerData>
                <appender-ref ref ="CONSOLE"/>
            </appender>
        </then>
    </if>

    <if condition='isDefined("logging.debug_log_file_path")'>
        <then>
            <appender name="FILE_DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                    <level>DEBUG</level>
                </filter>
                <encoder>
                    <charset>UTF-8</charset>
                    <pattern>${logging.encoder.pattern}</pattern>
                </encoder>
                <file>${logging.debug_log_file_path}</file>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <fileNamePattern>${logging.debug_log_file_path}-%d{yyyy-MM-dd}/%d{yyyy-MM-dd}.%i.debug.log</fileNamePattern>
                    <if condition='isDefined("logging.file.debug.max.history.in.days")'>
                        <then>
                            <maxHistory>${logging.file.debug.max.history.in.days}</maxHistory>
                        </then>
                    </if>
                    <if condition='!isDefined("logging.file.debug.max.history.in.days")'>
                        <then>
                            <maxHistory>${logging.file.max.history.in.days}</maxHistory>
                        </then>
                    </if>
                    <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                        <maxFileSize>${logging.file.max.size}</maxFileSize>
                    </timeBasedFileNamingAndTriggeringPolicy>
                </rollingPolicy>
            </appender>

            <appender name ="ASYNC_FILE_DEBUG" class= "ch.qos.logback.classic.AsyncAppender">
                <discardingThreshold >0</discardingThreshold>
                <queueSize>${logging.async.queue.size}</queueSize>
                <includeCallerData>true</includeCallerData>
                <appender-ref ref ="FILE_DEBUG"/>
            </appender>
        </then>
    </if>

    <if condition='isDefined("logging.info_log_file_path")'>
        <then>
            <appender name="FILE_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                    <level>INFO</level>
                </filter>
                <encoder>
                    <charset>UTF-8</charset>
                    <pattern>${logging.encoder.pattern}</pattern>
                </encoder>
                <file>${logging.info_log_file_path}</file>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <fileNamePattern>${logging.info_log_file_path}-%d{yyyy-MM-dd}/%d{yyyy-MM-dd}.%i.info.log</fileNamePattern>
                    <if condition='isDefined("logging.file.info.max.history.in.days")'>
                        <then>
                            <maxHistory>${logging.file.info.max.history.in.days}</maxHistory>
                        </then>
                    </if>
                    <if condition='!isDefined("logging.file.info.max.history.in.days")'>
                        <then>
                            <maxHistory>${logging.file.max.history.in.days}</maxHistory>
                        </then>
                    </if>
                    <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                        <maxFileSize>${logging.file.max.size}</maxFileSize>
                    </timeBasedFileNamingAndTriggeringPolicy>
                </rollingPolicy>
            </appender>

            <appender name ="ASYNC_FILE_INFO" class= "ch.qos.logback.classic.AsyncAppender">
                <discardingThreshold >0</discardingThreshold>
                <queueSize>${logging.async.queue.size}</queueSize>
                <includeCallerData>true</includeCallerData>
                <appender-ref ref ="FILE_INFO"/>
            </appender>
        </then>
    </if>

    <if condition='isDefined("logging.warn_log_file_path")'>
        <then>
            <appender name="FILE_WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                    <level>WARN</level>
                </filter>
                <encoder>
                    <charset>UTF-8</charset>
                    <pattern>${logging.encoder.pattern}</pattern>
                </encoder>
                <file>${logging.warn_log_file_path}</file>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <fileNamePattern>${logging.warn_log_file_path}-%d{yyyy-MM-dd}/%d{yyyy-MM-dd}.%i.warn.log</fileNamePattern>
                    <if condition='isDefined("logging.file.warn.max.history.in.days")'>
                        <then>
                            <maxHistory>${logging.file.warn.max.history.in.days}</maxHistory>
                        </then>
                    </if>
                    <if condition='!isDefined("logging.file.warn.max.history.in.days")'>
                        <then>
                            <maxHistory>${logging.file.max.history.in.days}</maxHistory>
                        </then>
                    </if>
                    <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                        <maxFileSize>${logging.file.max.size}</maxFileSize>
                    </timeBasedFileNamingAndTriggeringPolicy>
                </rollingPolicy>
            </appender>

            <appender name ="ASYNC_FILE_WARN" class= "ch.qos.logback.classic.AsyncAppender">
                <discardingThreshold >0</discardingThreshold>
                <queueSize>${logging.async.queue.size}</queueSize>
                <includeCallerData>true</includeCallerData>
                <appender-ref ref ="FILE_WARN"/>
            </appender>
        </then>
    </if>

    <if condition='isDefined("logging.error_log_file_path")'>
        <then>
            <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                    <level>ERROR</level>
                </filter>
                <encoder>
                    <charset>UTF-8</charset>
                    <pattern>${logging.encoder.pattern}</pattern>
                </encoder>
                <file>${logging.error_log_file_path}</file>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <fileNamePattern>${logging.error_log_file_path}-%d{yyyy-MM-dd}/%d{yyyy-MM-dd}.%i.error.log</fileNamePattern>
                    <if condition='isDefined("logging.file.error.max.history.in.days")'>
                        <then>
                            <maxHistory>${logging.file.error.max.history.in.days}</maxHistory>
                        </then>
                    </if>
                    <if condition='!isDefined("logging.file.error.max.history.in.days")'>
                        <then>
                            <maxHistory>${logging.file.max.history.in.days}</maxHistory>
                        </then>
                    </if>
                    <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                        <maxFileSize>${logging.file.max.size}</maxFileSize>
                    </timeBasedFileNamingAndTriggeringPolicy>
                </rollingPolicy>
            </appender>

            <appender name ="ASYNC_FILE_ERROR" class= "ch.qos.logback.classic.AsyncAppender">
                <discardingThreshold >0</discardingThreshold>
                <queueSize>${logging.async.queue.size}</queueSize>
                <includeCallerData>true</includeCallerData>
                <appender-ref ref ="FILE_ERROR"/>
            </appender>
        </then>
    </if>

    <root level="INFO">
        <if condition='"true".equals(property("logging.appender.console.enabled"))'>
            <then>
                <appender-ref ref="ASYNC_CONSOLE" />
            </then>
        </if>
        <if condition='isDefined("logging.debug_log_file_path")'>
            <then>
                <appender-ref ref="ASYNC_FILE_DEBUG" />
            </then>
        </if>
        <if condition='isDefined("logging.info_log_file_path")'>
            <then>
                <appender-ref ref="ASYNC_FILE_INFO" />
            </then>
        </if>
        <if condition='isDefined("logging.warn_log_file_path")'>
            <then>
                <appender-ref ref="ASYNC_FILE_WARN" />
            </then>
        </if>
        <if condition='isDefined("logging.error_log_file_path")'>
            <then>
                <appender-ref ref="ASYNC_FILE_ERROR" />
            </then>
        </if>
    </root>
</included>
